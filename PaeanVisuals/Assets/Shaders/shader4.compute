#pragma kernel CSMain

RWTexture2D<float4> reader;
Texture2D<float4> ao;
Texture2D<float4> height;
Texture2D<float4> albedo;
Texture2D<float4> rough;
Texture2D<float4> fluid;
Texture2D<float4> noise;
//Texture2D<float4> lut;
//TextureCube<float4> ref;
SamplerState _LinearRepeat;
float _time;
float liquide;
float audio1;
float rotation;
float zoom;
//float neutre;
//float bleu;
float audio2;
float low;
float mid;
float high;
float low1;
float mid1;
float high1;
int _rx;
int _ry;
float hs(float2 p) { return frac(sin(dot(floor(p), float2(45., 98.)))*7845.23+_time*10.); }
float2 isphe(in float3 ro, in float3 rd, in float3 cen, in float rad)
{
	ro -= cen;
	float b = dot(rd, ro);
	float c = dot(ro, ro) - rad * rad;
	float h = b * b - c;
	if (h < 0.)return float2(-1.,-1.);
	h = sqrt(h);
	return float2(-b - h, -b + h);
}
float smin(float a, float b, float t) {
	float h = clamp(0.5 + 0.5*(b - a) / t, 0., 1.);
	return lerp(b, a, h) - t * h*(1. - h);
}
float3 smin(float3 a, float3 b, float t) {
	float3 h = clamp(0.5 + 0.5*(b - a) / t, 0., 1.);
	return lerp(b, a, h) - t * h*(1. - h);
}
float ov(float a, float b) { return lerp(2.*a*b, 1. - 2.*(1. - a)*(1. - b), step(0.5, a)); }
float3 ov(float3 a, float3 b) { return lerp(2.*a*b, 1. - 2.*(1. - a)*(1. - b), step(0.5, a)); }

float box(float3 p, float3 r) {
	float3 q = abs(p) - r;
	return length(max(q, float3(0., 0., 0.))) + min(0., max(q.x, max(q.z, q.y)));
}
float2x2 rot(float t) { float c = cos(t); float s = sin(t); return float2x2(c, -s, s, c); }
float ts; float tt; float ta; float2 tn; float tc; float dl;
float map(float3 p, float2 uv) {
	
		float3 pfc = p;
		p.xz = mul(p.xz, rot(lerp(2.5, -0.9, sin(_time*0.03)*0.5 + 0.5)));
		float3 pn = p;
		float d1 = 100.; float d4 = 100.;
		float vr1 = 0.5 + uv.y; float vr2 = 0.8 + uv.y;
		p.xz = mul(p.xz, rot(-vr1));
		float3 pl = p;
		for (int k = 0; k < 6; k++) {
			p -= uv.x;
			p.xz = mul(p.xz, rot(vr1));
			p.yz = mul(p.yz, rot(vr2));
			p = abs(p);
			pl -= uv.x;
			pl.xz = mul(pl.xz, rot(vr1));
			pl.yz = mul(pl.yz, rot(vr2));
			pl = smin(pl, -pl, -0.8);
			d1 = min(d1, box(p, float3(0.8, 0.6, 0.9)));
			d4 = min(d4, box(pl, float3(0.8, 0.6, 0.9)));
		}
		tc = albedo.SampleLevel(_LinearRepeat, p.xz*0.5, 0.).x*0.65 + albedo.SampleLevel(_LinearRepeat, pn.xz*0.3, 0.).x*0.35;
		ts = rough.SampleLevel(_LinearRepeat, p.xz*0.5, 0.).x*0.35 + rough.SampleLevel(_LinearRepeat, pn.xz*0.3, 0.).x*0.65;
		tt = height.SampleLevel(_LinearRepeat, p.xz*0.5, 0.).x*0.35 + height.SampleLevel(_LinearRepeat, pn.xz*0.3, 0.).x*0.65;
		ta = ao.SampleLevel(_LinearRepeat, p.xz*0.5, 0.).x*ao.SampleLevel(_LinearRepeat, pn.xz*0.3, 0.).x;
		float d2 = d1 - height.SampleLevel(_LinearRepeat, p.xz*0.5, 0.).x*0.3 - height.SampleLevel(_LinearRepeat, pn.z*0.3, 0.).x*0.6 - -height.SampleLevel(_LinearRepeat, pn.yx, 0.).x*0.1;
		d4 += lerp(0., -1., liquide) + fluid.SampleLevel(_LinearRepeat, (pfc.xy*0.2 + 0.5), 0.).x*0.2 + fluid.SampleLevel(_LinearRepeat, (pfc.zx*0.2 + 0.5), 0.).x*0.1;
		dl = d4;

		return min(d2, d4);
	
}
float3 nor(float3 p, float2 uv) { float2 e = float2(0.003, 0.); return normalize(map(p, uv) - float3(map(p - e.xyy, uv), map(p - e.yxy, uv), map(p - e.yyx, uv))); }
float getShadow(float3 pos, float3 at, float k, float2 uv) {
	float3 dir = normalize(at - pos);
	float maxt = length(at - pos);
	float f = 1.;
	float t = .1;
	for (float i = 0.; i <= 1.; i += 1. / 20.) {
		float dist = map(pos + dir * t, uv);
		if (dist < .01) return 0.;
		f = min(f, k * dist / t);
		t += dist;
		if (t >= maxt) break;
	}
	return f;
}

[numthreads(8,8,1)] 
void CSMain (uint2 id : SV_DispatchThreadID) 
{
	float s1 = noise.SampleLevel(_LinearRepeat, float2(0., _time), 0.).x;
	float s1b = s1  * pow(audio1, 2.)*low1;
	float s2 = noise.SampleLevel(_LinearRepeat, float2(0.25, _time), 0.).x;
	float2 mt = float2(+0.9 + s1b ,(s2 - 0.5)*pow(audio1,2.)*mid1);
	mt += float2(low, mid)*audio2;
	//float prevColor = reader.SampleLevel(_LinearRepeat, uc + 0.5 / res, 0).a;
	float2 f = float2(id.x,id.y);
	float2 res=float2(_rx,_ry); 
	float2 uv = ((f / res)-0.5)*2.;
	uv.x *= res.x / res.y;
	float3 p = float3(0., 7.5, -7-s1b*10.);
	float3 r = normalize(float3(uv, lerp(0.5,3.,zoom)));
	r.yz = mul(r.yz,rot(-0.8+rotation*0.2));

	float dd = 0.; float dm = 15.;
	float2 vol = isphe(p, r, float3(0., 0., 0.), 10.+s1b*5.);
	if (vol.y > 0.0)
	{
		for (int j = 0; j < 64; j++) {

			float d = map(p, mt);
			if (dd > dm) { dd = dm; break; }
			if (d < 0.01) { break; }
			p += r * d;
			dd += d;
		}
	}
	else { dm = 0.; }
	float ml = step(0.01, dl);
	float s = smoothstep(dm, 0., dd);
	float3 n = nor(p, mt);
	float ld = clamp(dot(n, -r), 0., 1.);
	
	float fres = ov((pow(1. - ld, ts) + pow(ld, ts))*(1. - ts) ,tc*2.5)*ta;
	//float fres = tc * ta;
	float3 lp =float3(sin(_time*0.1)*-30.*0.-19.23,23.6,-6.1);
	float l1 = dot(n, normalize(lp));
	float sha = lerp(pow(abs(tt), 2.5), 1., getShadow(p, lp, 20, mt));
	float l2 = sha * l1; 
	float al = ov(fres,l2);
	float frl = ov(lerp(pow(1. - ld, 5.)*0.5 + pow(ld, 500.),0.5,0.1),smoothstep(0.2,0.9,tc));
	float r1 = lerp(frl, al, ml);
	//float3 r3 = ref.SampleLevel(_LinearRepeat, n, 0).xyz; 
	float po = max(
		lerp(1.,pow((1.-noise.SampleLevel(_LinearRepeat, float2(0.75, _time), 0.).x),2.)*10.,audio1*high1),
		lerp(1.,clamp(2. - high*10.,0.,1.), audio2));
	float hh = lerp(hs(f),0.5,lerp(1.,0.5,zoom));
	float3 h3 = float3(hh, hh, hh);
	float tf = ov(pow(r1, po), hh);
	reader[id] = float4(tf,tf,tf, 1.)*s;

}
