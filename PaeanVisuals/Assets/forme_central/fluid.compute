float myFloat;
#pragma kernel CSMain

Texture2D<float4> reader; 
RWTexture2D<float4> writer;
Texture2D<float4> texture1;
SamplerState _LinearClamp;
float time;
[numthreads(8,8,1)]
void CSMain (uint2 id : SV_DispatchThreadID) 
{
	float2 f = float2(id.x,id.y);  //fragCoord
	float2 b = float2(0.31,0.95);
	float2 resolution=float2(1024,1024); //texture resolution
	float2 v = float2(0.0,0.0);
	float4 c = float4(0,0,0,1);   //initial color
	for(int l=0;l<4;l++)
	{
		if ( dot(b,b) > pow(resolution.y,2.0) ) break;
		float2 p = b;
		for(int i=0;i<5;i++)
		{          
			float2 pos = f+p; 
			float rot=0.0;
			for(int i=0;i<5;i++)
			{
				rot+=dot(reader.SampleLevel(_LinearClamp,float2(frac((pos+p)/resolution.xy)),0).xy-float2(0.5,0.5),mul(float2(1,1),p.yx));
				p=float2(0.31*p.x+0.95*p.y,-0.95*p.x+0.31*p.y); 
			}
			v+=p.yx* rot/5.0/dot(b,b);      
			p=float2(0.31*p.x+0.95*p.y,-0.95*p.x+0.31*p.y);
		}
		b*=4.0;
	}   
	float4 color=reader.SampleLevel(_LinearClamp,frac((f+v*float2(-2,2))/resolution.xy),0)*0.98; 
	float2 s=(f.xy/resolution.xy)*2.0-float2(1.0,1.0);
	
	color += smoothstep(0.9,1.,texture1.SampleLevel(_LinearClamp, f / resolution+sin(time), 0.).x);
	c = color; 
	writer[id]=c;
}