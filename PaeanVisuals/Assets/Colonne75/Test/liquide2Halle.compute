#pragma kernel Main

#include "HLSLSupport.cginc"
#include "Packages/jp.keijiro.pcx/Runtime/Shaders/Common.cginc"

StructuredBuffer<float4> SourceBuffer;
RWStructuredBuffer<float4> OutputBuffer;
Texture2D<float4> noise;
//Texture2D<float4> fluid;
//TextureCube<float4> ref;
SamplerState _LinearRepeat;
CBUFFER_START(Params)
    float audio1;
float audio2;
float liquide;
	float wpx;
	float wpy;
	float wpz;
	float time;
CBUFFER_END

static const float kHeight = 1.5;

float no(float3 p) { float3 f = floor(p); p = smoothstep(0., 1., frac(p));
float3 se = float3(45., 78., 945.); float4 v1 = dot(se, f) + float4(0., se.y, se.z, se.y + se.z);
float4 v2 = lerp(frac(sin(v1)*7845.236), frac(sin(v1+se.x)*7845.236), p.x);
float2 v3 = lerp(v2.xz, v2.yw, p.y);
return lerp(v3.x, v3.y, p.z);
}
float rd(float3 p) {
	float3 f = floor(p);
	float3 se = float3(45., 78., 945.); float4 v1 = dot(se, f) + float4(0., se.y, se.z, se.y + se.z);
	float tt = 7845.236 + time;
	float4 v2 = lerp(frac(sin(v1)*tt), frac(sin(v1 + se.x)*tt), p.x);
	float2 v3 = lerp(v2.xz, v2.yw, p.y);
	return lerp(v3.x, v3.y, p.z);
}
float2x2 rot(float t) { float c = cos(t); float s = sin(t); return float2x2(c, -s, s, c); }
[numthreads(128, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    float4 pt = SourceBuffer[id];
	
    float3 p = pt.xyz;
	float3 pp = p + float3(wpx,wpy,wpz);
	half3 c = PcxDecodeColor(asuint(pt.w));
	float3 n = (c - 0.5)*2.;
	float tt = time;
	//p.x += (sin(pp.z*0.5+tt) + sin(pp.y*0.5 + tt))*1.3;

	float t1 = time*0.5;
	float t2 =-time*0.5+2.5;

	p.xz = mul(p.xz, rot(t1));
	n.xz = mul(n.xz, rot(t1));
	//p.xz = mul(p.xz, rot(t2));
	//n.xz = mul(n.xz, rot(t2));
	p.y += (cos(pp.x*0.8 + tt) + sin(pp.z*0.8 - tt)*0.5)*0.5;
	p.z += (sin(pp.x*2. - tt) +sin(pp.y*2. - tt)*0.5)*0.375;
	p.yz += float2(cos((p.x*1.6 + p.z*1.6)*.3 + tt * 1.5),sin((p.x*1.6 + p.z*1.6)*0.3 + tt * 1.5))*0.25;

	
	float3 b1 = float3(no(pp*1.6 + tt) , no(pp*1.6- tt), no(pp*1.6 + float3(tt, -tt, tt)) );
	float3 b2 = float3(no(pp*2. + tt * 3.) , no(pp*2. - tt * 3.) , no(pp*2. + float3(tt, -tt, tt)*3.));
	float3 b3 =pow( b1,4.)*0.25 + pow(b2,4.)*0.025;
	p += n * b3;
	//float3 refl = reflect(n, float3(0., 0., 1.));
	//p.zy = mul(p.zy, rot(tt*0.1));
	//n.zy = mul(n.zy, rot(tt*0.1));
    OutputBuffer[id] = float4(p, asfloat(PcxEncodeColor(smoothstep(0.3,0.7,c.y))));
}
