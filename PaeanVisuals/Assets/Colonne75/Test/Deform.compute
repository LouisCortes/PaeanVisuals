#pragma kernel Main

#include "HLSLSupport.cginc"
#include "Packages/jp.keijiro.pcx/Runtime/Shaders/Common.cginc"

StructuredBuffer<float4> SourceBuffer;
RWStructuredBuffer<float4> OutputBuffer;
Texture2D<float4> noise;
//Texture2D<float4> fluid;
SamplerState _LinearRepeat;
CBUFFER_START(Params)
    float audio1;
float audio2;
float liquide;
	float wpx;
	float wpy;
	float wpz;
	float time;
CBUFFER_END

static const float kHeight = 1.5;

float no(float3 p) { float3 f = floor(p); p = smoothstep(0., 1., frac(p));
float3 se = float3(45., 78., 945.); float4 v1 = dot(se, f) + float4(0., se.y, se.z, se.y + se.z);
float4 v2 = lerp(frac(sin(v1)*7845.236), frac(sin(v1+se.x)*7845.236), p.x);
float2 v3 = lerp(v2.xz, v2.yw, p.y);
return lerp(v3.x, v3.y, p.z);
}
float rd(float3 p) {
	float3 f = floor(p);
	float3 se = float3(45., 78., 945.); float4 v1 = dot(se, f) + float4(0., se.y, se.z, se.y + se.z);
	float tt = 7845.236 + time;
	float4 v2 = lerp(frac(sin(v1)*tt), frac(sin(v1 + se.x)*tt), p.x);
	float2 v3 = lerp(v2.xz, v2.yw, p.y);
	return lerp(v3.x, v3.y, p.z);
}
float2x2 rot(float t) { float c = cos(t); float s = sin(t); return float2x2(c, -s, s, c); }
[numthreads(128, 1, 1)]
void Main(uint id : SV_DispatchThreadID)
{
    float4 pt = SourceBuffer[id];
	
    float3 p = pt.xyz;
	float3 pp = p + float3(wpx,wpy,wpz);
	float lc = smoothstep(0.8, 1.8, length(pp.y + 1.));

    half3 c = PcxDecodeColor(asuint(pt.w));
	float3 n = (c - 0.5)*2.;

	float3 b1 = float3(no(pp*0.3 + time) - 0.5, no(pp*0.3 - time) - 0.5, no(pp*0.3 + float3(time, -time, time)) - 0.5);
	float3 b2 = float3(no(pp*2. + time*3.) - 0.5, no(pp*2. - time * 3.) - 0.5, no(pp*2. + float3(time, -time, time)*3.) - 0.5);
	float3 b3 = b1*20. + b2 * lerp(3.5, 0.8, pow(liquide, 0.25));
	p += b3*liquide;
	float bs = pow(float3(noise.SampleLevel(_LinearRepeat, pp.zy*0.2, 0.).x, noise.SampleLevel(_LinearRepeat, pp.xz*0.2, 0.).x, noise.SampleLevel(_LinearRepeat, pp.xy*0.2, 0.).x), float3(2., 2., 2.))*20.;
	p += n * max(audio1* (pow(noise.SampleLevel(_LinearRepeat, float2(time*0.02, time*2.), 0.).x, 5.)), audio2)*lerp(bs,b3,liquide);

	float c1 =smoothstep(0.3,0.7,abs(b1.x) + abs(b1.y) + abs(b1.z));

    OutputBuffer[id] = float4(p, asfloat(PcxEncodeColor(1.)));
}
